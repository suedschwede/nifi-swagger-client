/*
 * NiFi Rest Api
 * The Rest Api provides programmatic access to command and control a NiFi instance in real time. Start and                                              stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * OpenAPI spec version: 1.12.1
 * Contact: dev@nifi.apache.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package at.mic.nifi.swagger.client.model;

import java.util.Objects;
import at.mic.nifi.swagger.client.model.FlowSnippetDTO;
import at.mic.nifi.swagger.client.model.ParameterContextReferenceEntity;
import at.mic.nifi.swagger.client.model.PositionDTO;
import at.mic.nifi.swagger.client.model.VersionControlInformationDTO;
import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * ProcessGroupDTO
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-11-05T15:38:14.826+01:00")
public class ProcessGroupDTO {
  @SerializedName("id")
  private String id = null;

  @SerializedName("versionedComponentId")
  private String versionedComponentId = null;

  @SerializedName("parentGroupId")
  private String parentGroupId = null;

  @SerializedName("position")
  private PositionDTO position = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("comments")
  private String comments = null;

  @SerializedName("variables")
  private Map<String, String> variables = new HashMap<String, String>();

  @SerializedName("versionControlInformation")
  private VersionControlInformationDTO versionControlInformation = null;

  @SerializedName("parameterContext")
  private ParameterContextReferenceEntity parameterContext = null;

  /**
   * The FlowFile Concurrency for this Process Group.
   */
  public enum FlowfileConcurrencyEnum {
    @SerializedName("UNBOUNDED")
    UNBOUNDED("UNBOUNDED"),
    
    @SerializedName("SINGLE_FLOWFILE_PER_NODE")
    SINGLE_FLOWFILE_PER_NODE("SINGLE_FLOWFILE_PER_NODE");

    private String value;

    FlowfileConcurrencyEnum(String value) {
      this.value = value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
  }

  @SerializedName("flowfileConcurrency")
  private FlowfileConcurrencyEnum flowfileConcurrency = null;

  /**
   * The Oubound Policy that is used for determining how FlowFiles should be transferred out of the Process Group.
   */
  public enum FlowfileOutboundPolicyEnum {
    @SerializedName("STREAM_WHEN_AVAILABLE")
    STREAM_WHEN_AVAILABLE("STREAM_WHEN_AVAILABLE"),
    
    @SerializedName("BATCH_OUTPUT")
    BATCH_OUTPUT("BATCH_OUTPUT");

    private String value;

    FlowfileOutboundPolicyEnum(String value) {
      this.value = value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
  }

  @SerializedName("flowfileOutboundPolicy")
  private FlowfileOutboundPolicyEnum flowfileOutboundPolicy = null;

  @SerializedName("runningCount")
  private Integer runningCount = null;

  @SerializedName("stoppedCount")
  private Integer stoppedCount = null;

  @SerializedName("invalidCount")
  private Integer invalidCount = null;

  @SerializedName("disabledCount")
  private Integer disabledCount = null;

  @SerializedName("activeRemotePortCount")
  private Integer activeRemotePortCount = null;

  @SerializedName("inactiveRemotePortCount")
  private Integer inactiveRemotePortCount = null;

  @SerializedName("upToDateCount")
  private Integer upToDateCount = null;

  @SerializedName("locallyModifiedCount")
  private Integer locallyModifiedCount = null;

  @SerializedName("staleCount")
  private Integer staleCount = null;

  @SerializedName("locallyModifiedAndStaleCount")
  private Integer locallyModifiedAndStaleCount = null;

  @SerializedName("syncFailureCount")
  private Integer syncFailureCount = null;

  @SerializedName("localInputPortCount")
  private Integer localInputPortCount = null;

  @SerializedName("localOutputPortCount")
  private Integer localOutputPortCount = null;

  @SerializedName("publicInputPortCount")
  private Integer publicInputPortCount = null;

  @SerializedName("publicOutputPortCount")
  private Integer publicOutputPortCount = null;

  @SerializedName("contents")
  private FlowSnippetDTO contents = null;

  @SerializedName("inputPortCount")
  private Integer inputPortCount = null;

  @SerializedName("outputPortCount")
  private Integer outputPortCount = null;

  public ProcessGroupDTO id(String id) {
    this.id = id;
    return this;
  }

   /**
   * The id of the component.
   * @return id
  **/
  @ApiModelProperty(example = "null", value = "The id of the component.")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public ProcessGroupDTO versionedComponentId(String versionedComponentId) {
    this.versionedComponentId = versionedComponentId;
    return this;
  }

   /**
   * The ID of the corresponding component that is under version control
   * @return versionedComponentId
  **/
  @ApiModelProperty(example = "null", value = "The ID of the corresponding component that is under version control")
  public String getVersionedComponentId() {
    return versionedComponentId;
  }

  public void setVersionedComponentId(String versionedComponentId) {
    this.versionedComponentId = versionedComponentId;
  }

  public ProcessGroupDTO parentGroupId(String parentGroupId) {
    this.parentGroupId = parentGroupId;
    return this;
  }

   /**
   * The id of parent process group of this component if applicable.
   * @return parentGroupId
  **/
  @ApiModelProperty(example = "null", value = "The id of parent process group of this component if applicable.")
  public String getParentGroupId() {
    return parentGroupId;
  }

  public void setParentGroupId(String parentGroupId) {
    this.parentGroupId = parentGroupId;
  }

  public ProcessGroupDTO position(PositionDTO position) {
    this.position = position;
    return this;
  }

   /**
   * The position of this component in the UI if applicable.
   * @return position
  **/
  @ApiModelProperty(example = "null", value = "The position of this component in the UI if applicable.")
  public PositionDTO getPosition() {
    return position;
  }

  public void setPosition(PositionDTO position) {
    this.position = position;
  }

  public ProcessGroupDTO name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The name of the process group.
   * @return name
  **/
  @ApiModelProperty(example = "null", value = "The name of the process group.")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public ProcessGroupDTO comments(String comments) {
    this.comments = comments;
    return this;
  }

   /**
   * The comments for the process group.
   * @return comments
  **/
  @ApiModelProperty(example = "null", value = "The comments for the process group.")
  public String getComments() {
    return comments;
  }

  public void setComments(String comments) {
    this.comments = comments;
  }

  public ProcessGroupDTO variables(Map<String, String> variables) {
    this.variables = variables;
    return this;
  }

  public ProcessGroupDTO putVariablesItem(String key, String variablesItem) {
    this.variables.put(key, variablesItem);
    return this;
  }

   /**
   * The variables that are configured for the Process Group. Note that this map contains only those variables that are defined on this Process Group and not any variables that are defined in the parent Process Group, etc. I.e., this Map will not contain all variables that are accessible by components in this Process Group by rather only the variables that are defined for this Process Group itself.
   * @return variables
  **/
  @ApiModelProperty(example = "null", value = "The variables that are configured for the Process Group. Note that this map contains only those variables that are defined on this Process Group and not any variables that are defined in the parent Process Group, etc. I.e., this Map will not contain all variables that are accessible by components in this Process Group by rather only the variables that are defined for this Process Group itself.")
  public Map<String, String> getVariables() {
    return variables;
  }

  public void setVariables(Map<String, String> variables) {
    this.variables = variables;
  }

  public ProcessGroupDTO versionControlInformation(VersionControlInformationDTO versionControlInformation) {
    this.versionControlInformation = versionControlInformation;
    return this;
  }

   /**
   * The Version Control information that indicates which Flow Registry, and where in the Flow Registry, this Process Group is tracking to; or null if this Process Group is not under version control
   * @return versionControlInformation
  **/
  @ApiModelProperty(example = "null", value = "The Version Control information that indicates which Flow Registry, and where in the Flow Registry, this Process Group is tracking to; or null if this Process Group is not under version control")
  public VersionControlInformationDTO getVersionControlInformation() {
    return versionControlInformation;
  }

  public void setVersionControlInformation(VersionControlInformationDTO versionControlInformation) {
    this.versionControlInformation = versionControlInformation;
  }

  public ProcessGroupDTO parameterContext(ParameterContextReferenceEntity parameterContext) {
    this.parameterContext = parameterContext;
    return this;
  }

   /**
   * The Parameter Context that this Process Group is bound to.
   * @return parameterContext
  **/
  @ApiModelProperty(example = "null", value = "The Parameter Context that this Process Group is bound to.")
  public ParameterContextReferenceEntity getParameterContext() {
    return parameterContext;
  }

  public void setParameterContext(ParameterContextReferenceEntity parameterContext) {
    this.parameterContext = parameterContext;
  }

  public ProcessGroupDTO flowfileConcurrency(FlowfileConcurrencyEnum flowfileConcurrency) {
    this.flowfileConcurrency = flowfileConcurrency;
    return this;
  }

   /**
   * The FlowFile Concurrency for this Process Group.
   * @return flowfileConcurrency
  **/
  @ApiModelProperty(example = "null", value = "The FlowFile Concurrency for this Process Group.")
  public FlowfileConcurrencyEnum getFlowfileConcurrency() {
    return flowfileConcurrency;
  }

  public void setFlowfileConcurrency(FlowfileConcurrencyEnum flowfileConcurrency) {
    this.flowfileConcurrency = flowfileConcurrency;
  }

  public ProcessGroupDTO flowfileOutboundPolicy(FlowfileOutboundPolicyEnum flowfileOutboundPolicy) {
    this.flowfileOutboundPolicy = flowfileOutboundPolicy;
    return this;
  }

   /**
   * The Oubound Policy that is used for determining how FlowFiles should be transferred out of the Process Group.
   * @return flowfileOutboundPolicy
  **/
  @ApiModelProperty(example = "null", value = "The Oubound Policy that is used for determining how FlowFiles should be transferred out of the Process Group.")
  public FlowfileOutboundPolicyEnum getFlowfileOutboundPolicy() {
    return flowfileOutboundPolicy;
  }

  public void setFlowfileOutboundPolicy(FlowfileOutboundPolicyEnum flowfileOutboundPolicy) {
    this.flowfileOutboundPolicy = flowfileOutboundPolicy;
  }

  public ProcessGroupDTO runningCount(Integer runningCount) {
    this.runningCount = runningCount;
    return this;
  }

   /**
   * The number of running components in this process group.
   * @return runningCount
  **/
  @ApiModelProperty(example = "null", value = "The number of running components in this process group.")
  public Integer getRunningCount() {
    return runningCount;
  }

  public void setRunningCount(Integer runningCount) {
    this.runningCount = runningCount;
  }

  public ProcessGroupDTO stoppedCount(Integer stoppedCount) {
    this.stoppedCount = stoppedCount;
    return this;
  }

   /**
   * The number of stopped components in the process group.
   * @return stoppedCount
  **/
  @ApiModelProperty(example = "null", value = "The number of stopped components in the process group.")
  public Integer getStoppedCount() {
    return stoppedCount;
  }

  public void setStoppedCount(Integer stoppedCount) {
    this.stoppedCount = stoppedCount;
  }

  public ProcessGroupDTO invalidCount(Integer invalidCount) {
    this.invalidCount = invalidCount;
    return this;
  }

   /**
   * The number of invalid components in the process group.
   * @return invalidCount
  **/
  @ApiModelProperty(example = "null", value = "The number of invalid components in the process group.")
  public Integer getInvalidCount() {
    return invalidCount;
  }

  public void setInvalidCount(Integer invalidCount) {
    this.invalidCount = invalidCount;
  }

  public ProcessGroupDTO disabledCount(Integer disabledCount) {
    this.disabledCount = disabledCount;
    return this;
  }

   /**
   * The number of disabled components in the process group.
   * @return disabledCount
  **/
  @ApiModelProperty(example = "null", value = "The number of disabled components in the process group.")
  public Integer getDisabledCount() {
    return disabledCount;
  }

  public void setDisabledCount(Integer disabledCount) {
    this.disabledCount = disabledCount;
  }

  public ProcessGroupDTO activeRemotePortCount(Integer activeRemotePortCount) {
    this.activeRemotePortCount = activeRemotePortCount;
    return this;
  }

   /**
   * The number of active remote ports in the process group.
   * @return activeRemotePortCount
  **/
  @ApiModelProperty(example = "null", value = "The number of active remote ports in the process group.")
  public Integer getActiveRemotePortCount() {
    return activeRemotePortCount;
  }

  public void setActiveRemotePortCount(Integer activeRemotePortCount) {
    this.activeRemotePortCount = activeRemotePortCount;
  }

  public ProcessGroupDTO inactiveRemotePortCount(Integer inactiveRemotePortCount) {
    this.inactiveRemotePortCount = inactiveRemotePortCount;
    return this;
  }

   /**
   * The number of inactive remote ports in the process group.
   * @return inactiveRemotePortCount
  **/
  @ApiModelProperty(example = "null", value = "The number of inactive remote ports in the process group.")
  public Integer getInactiveRemotePortCount() {
    return inactiveRemotePortCount;
  }

  public void setInactiveRemotePortCount(Integer inactiveRemotePortCount) {
    this.inactiveRemotePortCount = inactiveRemotePortCount;
  }

  public ProcessGroupDTO upToDateCount(Integer upToDateCount) {
    this.upToDateCount = upToDateCount;
    return this;
  }

   /**
   * The number of up to date versioned process groups in the process group.
   * @return upToDateCount
  **/
  @ApiModelProperty(example = "null", value = "The number of up to date versioned process groups in the process group.")
  public Integer getUpToDateCount() {
    return upToDateCount;
  }

  public void setUpToDateCount(Integer upToDateCount) {
    this.upToDateCount = upToDateCount;
  }

  public ProcessGroupDTO locallyModifiedCount(Integer locallyModifiedCount) {
    this.locallyModifiedCount = locallyModifiedCount;
    return this;
  }

   /**
   * The number of locally modified versioned process groups in the process group.
   * @return locallyModifiedCount
  **/
  @ApiModelProperty(example = "null", value = "The number of locally modified versioned process groups in the process group.")
  public Integer getLocallyModifiedCount() {
    return locallyModifiedCount;
  }

  public void setLocallyModifiedCount(Integer locallyModifiedCount) {
    this.locallyModifiedCount = locallyModifiedCount;
  }

  public ProcessGroupDTO staleCount(Integer staleCount) {
    this.staleCount = staleCount;
    return this;
  }

   /**
   * The number of stale versioned process groups in the process group.
   * @return staleCount
  **/
  @ApiModelProperty(example = "null", value = "The number of stale versioned process groups in the process group.")
  public Integer getStaleCount() {
    return staleCount;
  }

  public void setStaleCount(Integer staleCount) {
    this.staleCount = staleCount;
  }

  public ProcessGroupDTO locallyModifiedAndStaleCount(Integer locallyModifiedAndStaleCount) {
    this.locallyModifiedAndStaleCount = locallyModifiedAndStaleCount;
    return this;
  }

   /**
   * The number of locally modified and stale versioned process groups in the process group.
   * @return locallyModifiedAndStaleCount
  **/
  @ApiModelProperty(example = "null", value = "The number of locally modified and stale versioned process groups in the process group.")
  public Integer getLocallyModifiedAndStaleCount() {
    return locallyModifiedAndStaleCount;
  }

  public void setLocallyModifiedAndStaleCount(Integer locallyModifiedAndStaleCount) {
    this.locallyModifiedAndStaleCount = locallyModifiedAndStaleCount;
  }

  public ProcessGroupDTO syncFailureCount(Integer syncFailureCount) {
    this.syncFailureCount = syncFailureCount;
    return this;
  }

   /**
   * The number of versioned process groups in the process group that are unable to sync to a registry.
   * @return syncFailureCount
  **/
  @ApiModelProperty(example = "null", value = "The number of versioned process groups in the process group that are unable to sync to a registry.")
  public Integer getSyncFailureCount() {
    return syncFailureCount;
  }

  public void setSyncFailureCount(Integer syncFailureCount) {
    this.syncFailureCount = syncFailureCount;
  }

  public ProcessGroupDTO localInputPortCount(Integer localInputPortCount) {
    this.localInputPortCount = localInputPortCount;
    return this;
  }

   /**
   * The number of local input ports in the process group.
   * @return localInputPortCount
  **/
  @ApiModelProperty(example = "null", value = "The number of local input ports in the process group.")
  public Integer getLocalInputPortCount() {
    return localInputPortCount;
  }

  public void setLocalInputPortCount(Integer localInputPortCount) {
    this.localInputPortCount = localInputPortCount;
  }

  public ProcessGroupDTO localOutputPortCount(Integer localOutputPortCount) {
    this.localOutputPortCount = localOutputPortCount;
    return this;
  }

   /**
   * The number of local output ports in the process group.
   * @return localOutputPortCount
  **/
  @ApiModelProperty(example = "null", value = "The number of local output ports in the process group.")
  public Integer getLocalOutputPortCount() {
    return localOutputPortCount;
  }

  public void setLocalOutputPortCount(Integer localOutputPortCount) {
    this.localOutputPortCount = localOutputPortCount;
  }

  public ProcessGroupDTO publicInputPortCount(Integer publicInputPortCount) {
    this.publicInputPortCount = publicInputPortCount;
    return this;
  }

   /**
   * The number of public input ports in the process group.
   * @return publicInputPortCount
  **/
  @ApiModelProperty(example = "null", value = "The number of public input ports in the process group.")
  public Integer getPublicInputPortCount() {
    return publicInputPortCount;
  }

  public void setPublicInputPortCount(Integer publicInputPortCount) {
    this.publicInputPortCount = publicInputPortCount;
  }

  public ProcessGroupDTO publicOutputPortCount(Integer publicOutputPortCount) {
    this.publicOutputPortCount = publicOutputPortCount;
    return this;
  }

   /**
   * The number of public output ports in the process group.
   * @return publicOutputPortCount
  **/
  @ApiModelProperty(example = "null", value = "The number of public output ports in the process group.")
  public Integer getPublicOutputPortCount() {
    return publicOutputPortCount;
  }

  public void setPublicOutputPortCount(Integer publicOutputPortCount) {
    this.publicOutputPortCount = publicOutputPortCount;
  }

  public ProcessGroupDTO contents(FlowSnippetDTO contents) {
    this.contents = contents;
    return this;
  }

   /**
   * The contents of this process group.
   * @return contents
  **/
  @ApiModelProperty(example = "null", value = "The contents of this process group.")
  public FlowSnippetDTO getContents() {
    return contents;
  }

  public void setContents(FlowSnippetDTO contents) {
    this.contents = contents;
  }

   /**
   * The number of input ports in the process group.
   * @return inputPortCount
  **/
  @ApiModelProperty(example = "null", value = "The number of input ports in the process group.")
  public Integer getInputPortCount() {
    return inputPortCount;
  }

   /**
   * The number of output ports in the process group.
   * @return outputPortCount
  **/
  @ApiModelProperty(example = "null", value = "The number of output ports in the process group.")
  public Integer getOutputPortCount() {
    return outputPortCount;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProcessGroupDTO processGroupDTO = (ProcessGroupDTO) o;
    return Objects.equals(this.id, processGroupDTO.id) &&
        Objects.equals(this.versionedComponentId, processGroupDTO.versionedComponentId) &&
        Objects.equals(this.parentGroupId, processGroupDTO.parentGroupId) &&
        Objects.equals(this.position, processGroupDTO.position) &&
        Objects.equals(this.name, processGroupDTO.name) &&
        Objects.equals(this.comments, processGroupDTO.comments) &&
        Objects.equals(this.variables, processGroupDTO.variables) &&
        Objects.equals(this.versionControlInformation, processGroupDTO.versionControlInformation) &&
        Objects.equals(this.parameterContext, processGroupDTO.parameterContext) &&
        Objects.equals(this.flowfileConcurrency, processGroupDTO.flowfileConcurrency) &&
        Objects.equals(this.flowfileOutboundPolicy, processGroupDTO.flowfileOutboundPolicy) &&
        Objects.equals(this.runningCount, processGroupDTO.runningCount) &&
        Objects.equals(this.stoppedCount, processGroupDTO.stoppedCount) &&
        Objects.equals(this.invalidCount, processGroupDTO.invalidCount) &&
        Objects.equals(this.disabledCount, processGroupDTO.disabledCount) &&
        Objects.equals(this.activeRemotePortCount, processGroupDTO.activeRemotePortCount) &&
        Objects.equals(this.inactiveRemotePortCount, processGroupDTO.inactiveRemotePortCount) &&
        Objects.equals(this.upToDateCount, processGroupDTO.upToDateCount) &&
        Objects.equals(this.locallyModifiedCount, processGroupDTO.locallyModifiedCount) &&
        Objects.equals(this.staleCount, processGroupDTO.staleCount) &&
        Objects.equals(this.locallyModifiedAndStaleCount, processGroupDTO.locallyModifiedAndStaleCount) &&
        Objects.equals(this.syncFailureCount, processGroupDTO.syncFailureCount) &&
        Objects.equals(this.localInputPortCount, processGroupDTO.localInputPortCount) &&
        Objects.equals(this.localOutputPortCount, processGroupDTO.localOutputPortCount) &&
        Objects.equals(this.publicInputPortCount, processGroupDTO.publicInputPortCount) &&
        Objects.equals(this.publicOutputPortCount, processGroupDTO.publicOutputPortCount) &&
        Objects.equals(this.contents, processGroupDTO.contents) &&
        Objects.equals(this.inputPortCount, processGroupDTO.inputPortCount) &&
        Objects.equals(this.outputPortCount, processGroupDTO.outputPortCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, versionedComponentId, parentGroupId, position, name, comments, variables, versionControlInformation, parameterContext, flowfileConcurrency, flowfileOutboundPolicy, runningCount, stoppedCount, invalidCount, disabledCount, activeRemotePortCount, inactiveRemotePortCount, upToDateCount, locallyModifiedCount, staleCount, locallyModifiedAndStaleCount, syncFailureCount, localInputPortCount, localOutputPortCount, publicInputPortCount, publicOutputPortCount, contents, inputPortCount, outputPortCount);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProcessGroupDTO {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    versionedComponentId: ").append(toIndentedString(versionedComponentId)).append("\n");
    sb.append("    parentGroupId: ").append(toIndentedString(parentGroupId)).append("\n");
    sb.append("    position: ").append(toIndentedString(position)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    comments: ").append(toIndentedString(comments)).append("\n");
    sb.append("    variables: ").append(toIndentedString(variables)).append("\n");
    sb.append("    versionControlInformation: ").append(toIndentedString(versionControlInformation)).append("\n");
    sb.append("    parameterContext: ").append(toIndentedString(parameterContext)).append("\n");
    sb.append("    flowfileConcurrency: ").append(toIndentedString(flowfileConcurrency)).append("\n");
    sb.append("    flowfileOutboundPolicy: ").append(toIndentedString(flowfileOutboundPolicy)).append("\n");
    sb.append("    runningCount: ").append(toIndentedString(runningCount)).append("\n");
    sb.append("    stoppedCount: ").append(toIndentedString(stoppedCount)).append("\n");
    sb.append("    invalidCount: ").append(toIndentedString(invalidCount)).append("\n");
    sb.append("    disabledCount: ").append(toIndentedString(disabledCount)).append("\n");
    sb.append("    activeRemotePortCount: ").append(toIndentedString(activeRemotePortCount)).append("\n");
    sb.append("    inactiveRemotePortCount: ").append(toIndentedString(inactiveRemotePortCount)).append("\n");
    sb.append("    upToDateCount: ").append(toIndentedString(upToDateCount)).append("\n");
    sb.append("    locallyModifiedCount: ").append(toIndentedString(locallyModifiedCount)).append("\n");
    sb.append("    staleCount: ").append(toIndentedString(staleCount)).append("\n");
    sb.append("    locallyModifiedAndStaleCount: ").append(toIndentedString(locallyModifiedAndStaleCount)).append("\n");
    sb.append("    syncFailureCount: ").append(toIndentedString(syncFailureCount)).append("\n");
    sb.append("    localInputPortCount: ").append(toIndentedString(localInputPortCount)).append("\n");
    sb.append("    localOutputPortCount: ").append(toIndentedString(localOutputPortCount)).append("\n");
    sb.append("    publicInputPortCount: ").append(toIndentedString(publicInputPortCount)).append("\n");
    sb.append("    publicOutputPortCount: ").append(toIndentedString(publicOutputPortCount)).append("\n");
    sb.append("    contents: ").append(toIndentedString(contents)).append("\n");
    sb.append("    inputPortCount: ").append(toIndentedString(inputPortCount)).append("\n");
    sb.append("    outputPortCount: ").append(toIndentedString(outputPortCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

