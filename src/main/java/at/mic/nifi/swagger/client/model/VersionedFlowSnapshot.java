/*
 * NiFi Rest Api
 * The Rest Api provides programmatic access to command and control a NiFi instance in real time. Start and                                              stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * OpenAPI spec version: 1.12.1
 * Contact: dev@nifi.apache.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package at.mic.nifi.swagger.client.model;

import java.util.Objects;
import at.mic.nifi.swagger.client.model.Bucket;
import at.mic.nifi.swagger.client.model.ExternalControllerServiceReference;
import at.mic.nifi.swagger.client.model.VersionedFlow;
import at.mic.nifi.swagger.client.model.VersionedFlowSnapshotMetadata;
import at.mic.nifi.swagger.client.model.VersionedParameterContext;
import at.mic.nifi.swagger.client.model.VersionedProcessGroup;
import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * VersionedFlowSnapshot
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-11-05T15:38:14.826+01:00")
public class VersionedFlowSnapshot {
  @SerializedName("snapshotMetadata")
  private VersionedFlowSnapshotMetadata snapshotMetadata = null;

  @SerializedName("flowContents")
  private VersionedProcessGroup flowContents = null;

  @SerializedName("externalControllerServices")
  private Map<String, ExternalControllerServiceReference> externalControllerServices = new HashMap<String, ExternalControllerServiceReference>();

  @SerializedName("parameterContexts")
  private Map<String, VersionedParameterContext> parameterContexts = new HashMap<String, VersionedParameterContext>();

  @SerializedName("flowEncodingVersion")
  private String flowEncodingVersion = null;

  @SerializedName("flow")
  private VersionedFlow flow = null;

  @SerializedName("bucket")
  private Bucket bucket = null;

  @SerializedName("latest")
  private Boolean latest = null;

  public VersionedFlowSnapshot snapshotMetadata(VersionedFlowSnapshotMetadata snapshotMetadata) {
    this.snapshotMetadata = snapshotMetadata;
    return this;
  }

   /**
   * The metadata for this snapshot
   * @return snapshotMetadata
  **/
  @ApiModelProperty(example = "null", required = true, value = "The metadata for this snapshot")
  public VersionedFlowSnapshotMetadata getSnapshotMetadata() {
    return snapshotMetadata;
  }

  public void setSnapshotMetadata(VersionedFlowSnapshotMetadata snapshotMetadata) {
    this.snapshotMetadata = snapshotMetadata;
  }

  public VersionedFlowSnapshot flowContents(VersionedProcessGroup flowContents) {
    this.flowContents = flowContents;
    return this;
  }

   /**
   * The contents of the versioned flow
   * @return flowContents
  **/
  @ApiModelProperty(example = "null", required = true, value = "The contents of the versioned flow")
  public VersionedProcessGroup getFlowContents() {
    return flowContents;
  }

  public void setFlowContents(VersionedProcessGroup flowContents) {
    this.flowContents = flowContents;
  }

  public VersionedFlowSnapshot externalControllerServices(Map<String, ExternalControllerServiceReference> externalControllerServices) {
    this.externalControllerServices = externalControllerServices;
    return this;
  }

  public VersionedFlowSnapshot putExternalControllerServicesItem(String key, ExternalControllerServiceReference externalControllerServicesItem) {
    this.externalControllerServices.put(key, externalControllerServicesItem);
    return this;
  }

   /**
   * The information about controller services that exist outside this versioned flow, but are referenced by components within the versioned flow.
   * @return externalControllerServices
  **/
  @ApiModelProperty(example = "null", value = "The information about controller services that exist outside this versioned flow, but are referenced by components within the versioned flow.")
  public Map<String, ExternalControllerServiceReference> getExternalControllerServices() {
    return externalControllerServices;
  }

  public void setExternalControllerServices(Map<String, ExternalControllerServiceReference> externalControllerServices) {
    this.externalControllerServices = externalControllerServices;
  }

  public VersionedFlowSnapshot parameterContexts(Map<String, VersionedParameterContext> parameterContexts) {
    this.parameterContexts = parameterContexts;
    return this;
  }

  public VersionedFlowSnapshot putParameterContextsItem(String key, VersionedParameterContext parameterContextsItem) {
    this.parameterContexts.put(key, parameterContextsItem);
    return this;
  }

   /**
   * The parameter contexts referenced by process groups in the flow contents. The mapping is from the name of the context to the context instance, and it is expected that any context in this map is referenced by at least one process group in this flow.
   * @return parameterContexts
  **/
  @ApiModelProperty(example = "null", value = "The parameter contexts referenced by process groups in the flow contents. The mapping is from the name of the context to the context instance, and it is expected that any context in this map is referenced by at least one process group in this flow.")
  public Map<String, VersionedParameterContext> getParameterContexts() {
    return parameterContexts;
  }

  public void setParameterContexts(Map<String, VersionedParameterContext> parameterContexts) {
    this.parameterContexts = parameterContexts;
  }

  public VersionedFlowSnapshot flowEncodingVersion(String flowEncodingVersion) {
    this.flowEncodingVersion = flowEncodingVersion;
    return this;
  }

   /**
   * The optional encoding version of the flow contents.
   * @return flowEncodingVersion
  **/
  @ApiModelProperty(example = "null", value = "The optional encoding version of the flow contents.")
  public String getFlowEncodingVersion() {
    return flowEncodingVersion;
  }

  public void setFlowEncodingVersion(String flowEncodingVersion) {
    this.flowEncodingVersion = flowEncodingVersion;
  }

  public VersionedFlowSnapshot flow(VersionedFlow flow) {
    this.flow = flow;
    return this;
  }

   /**
   * The flow this snapshot is for
   * @return flow
  **/
  @ApiModelProperty(example = "null", value = "The flow this snapshot is for")
  public VersionedFlow getFlow() {
    return flow;
  }

  public void setFlow(VersionedFlow flow) {
    this.flow = flow;
  }

  public VersionedFlowSnapshot bucket(Bucket bucket) {
    this.bucket = bucket;
    return this;
  }

   /**
   * The bucket where the flow is located
   * @return bucket
  **/
  @ApiModelProperty(example = "null", value = "The bucket where the flow is located")
  public Bucket getBucket() {
    return bucket;
  }

  public void setBucket(Bucket bucket) {
    this.bucket = bucket;
  }

  public VersionedFlowSnapshot latest(Boolean latest) {
    this.latest = latest;
    return this;
  }

   /**
   * Get latest
   * @return latest
  **/
  @ApiModelProperty(example = "null", value = "")
  public Boolean getLatest() {
    return latest;
  }

  public void setLatest(Boolean latest) {
    this.latest = latest;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VersionedFlowSnapshot versionedFlowSnapshot = (VersionedFlowSnapshot) o;
    return Objects.equals(this.snapshotMetadata, versionedFlowSnapshot.snapshotMetadata) &&
        Objects.equals(this.flowContents, versionedFlowSnapshot.flowContents) &&
        Objects.equals(this.externalControllerServices, versionedFlowSnapshot.externalControllerServices) &&
        Objects.equals(this.parameterContexts, versionedFlowSnapshot.parameterContexts) &&
        Objects.equals(this.flowEncodingVersion, versionedFlowSnapshot.flowEncodingVersion) &&
        Objects.equals(this.flow, versionedFlowSnapshot.flow) &&
        Objects.equals(this.bucket, versionedFlowSnapshot.bucket) &&
        Objects.equals(this.latest, versionedFlowSnapshot.latest);
  }

  @Override
  public int hashCode() {
    return Objects.hash(snapshotMetadata, flowContents, externalControllerServices, parameterContexts, flowEncodingVersion, flow, bucket, latest);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VersionedFlowSnapshot {\n");
    
    sb.append("    snapshotMetadata: ").append(toIndentedString(snapshotMetadata)).append("\n");
    sb.append("    flowContents: ").append(toIndentedString(flowContents)).append("\n");
    sb.append("    externalControllerServices: ").append(toIndentedString(externalControllerServices)).append("\n");
    sb.append("    parameterContexts: ").append(toIndentedString(parameterContexts)).append("\n");
    sb.append("    flowEncodingVersion: ").append(toIndentedString(flowEncodingVersion)).append("\n");
    sb.append("    flow: ").append(toIndentedString(flow)).append("\n");
    sb.append("    bucket: ").append(toIndentedString(bucket)).append("\n");
    sb.append("    latest: ").append(toIndentedString(latest)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

