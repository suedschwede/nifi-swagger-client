/*
 * NiFi Rest Api
 * The Rest Api provides programmatic access to command and control a NiFi instance in real time. Start and                                              stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * OpenAPI spec version: 1.12.1
 * Contact: dev@nifi.apache.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package at.mic.nifi.swagger.client;

import at.mic.nifi.swagger.ApiException;
import at.mic.nifi.swagger.client.model.ParameterContextEntity;
import at.mic.nifi.swagger.client.model.ParameterContextUpdateRequestEntity;
import at.mic.nifi.swagger.client.model.ParameterContextValidationRequestEntity;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ParameterContextsApi
 */
@Ignore
public class ParameterContextsApiTest {

    private final ParameterContextsApi api = new ParameterContextsApi();

    
    /**
     * Create a Parameter Context
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createParameterContextTest() throws ApiException {
        ParameterContextEntity body = null;
        ParameterContextEntity response = api.createParameterContext(body);

        // TODO: test validations
    }
    
    /**
     * Deletes the Parameter Context with the given ID
     *
     * Deletes the Parameter Context with the given ID.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteParameterContextTest() throws ApiException {
        String id = null;
        String version = null;
        String clientId = null;
        Boolean disconnectedNodeAcknowledged = null;
        ParameterContextEntity response = api.deleteParameterContext(id, version, clientId, disconnectedNodeAcknowledged);

        // TODO: test validations
    }
    
    /**
     * Deletes the Update Request with the given ID
     *
     * Deletes the Update Request with the given ID. After a request is created via a POST to /nifi-api/parameter-contexts/update-requests, it is expected that the client will properly clean up the request by DELETE&#39;ing it, once the Update process has completed. If the request is deleted before the request completes, then the Update request will finish the step that it is currently performing and then will cancel any subsequent steps.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteUpdateRequestTest() throws ApiException {
        String contextId = null;
        String requestId = null;
        Boolean disconnectedNodeAcknowledged = null;
        ParameterContextUpdateRequestEntity response = api.deleteUpdateRequest(contextId, requestId, disconnectedNodeAcknowledged);

        // TODO: test validations
    }
    
    /**
     * Deletes the Validation Request with the given ID
     *
     * Deletes the Validation Request with the given ID. After a request is created via a POST to /nifi-api/validation-contexts, it is expected that the client will properly clean up the request by DELETE&#39;ing it, once the validation process has completed. If the request is deleted before the request completes, then the Validation request will finish the step that it is currently performing and then will cancel any subsequent steps.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteValidationRequestTest() throws ApiException {
        String contextId = null;
        String id = null;
        Boolean disconnectedNodeAcknowledged = null;
        ParameterContextValidationRequestEntity response = api.deleteValidationRequest(contextId, id, disconnectedNodeAcknowledged);

        // TODO: test validations
    }
    
    /**
     * Returns the Parameter Context with the given ID
     *
     * Returns the Parameter Context with the given ID.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getParameterContextTest() throws ApiException {
        String id = null;
        ParameterContextEntity response = api.getParameterContext(id);

        // TODO: test validations
    }
    
    /**
     * Returns the Update Request with the given ID
     *
     * Returns the Update Request with the given ID. Once an Update Request has been created by performing a POST to /nifi-api/parameter-contexts, that request can subsequently be retrieved via this endpoint, and the request that is fetched will contain the updated state, such as percent complete, the current state of the request, and any failures. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getParameterContextUpdateTest() throws ApiException {
        String contextId = null;
        String requestId = null;
        ParameterContextUpdateRequestEntity response = api.getParameterContextUpdate(contextId, requestId);

        // TODO: test validations
    }
    
    /**
     * Returns the Validation Request with the given ID
     *
     * Returns the Validation Request with the given ID. Once a Validation Request has been created by performing a POST to /nifi-api/validation-contexts, that request can subsequently be retrieved via this endpoint, and the request that is fetched will contain the updated state, such as percent complete, the current state of the request, and any failures. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getValidationRequestTest() throws ApiException {
        String contextId = null;
        String id = null;
        ParameterContextValidationRequestEntity response = api.getValidationRequest(contextId, id);

        // TODO: test validations
    }
    
    /**
     * Initiate the Update Request of a Parameter Context
     *
     * This will initiate the process of updating a Parameter Context. Changing the value of a Parameter may require that one or more components be stopped and restarted, so this acttion may take significantly more time than many other REST API actions. As a result, this endpoint will immediately return a ParameterContextUpdateRequestEntity, and the process of updating the necessary components will occur asynchronously in the background. The client may then periodically poll the status of the request by issuing a GET request to /parameter-contexts/update-requests/{requestId}. Once the request is completed, the client is expected to issue a DELETE request to /parameter-contexts/update-requests/{requestId}.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void submitParameterContextUpdateTest() throws ApiException {
        String contextId = null;
        ParameterContextEntity body = null;
        ParameterContextUpdateRequestEntity response = api.submitParameterContextUpdate(contextId, body);

        // TODO: test validations
    }
    
    /**
     * Initiate a Validation Request to determine how the validity of components will change if a Parameter Context were to be updated
     *
     * This will initiate the process of validating all components whose Process Group is bound to the specified Parameter Context. Performing validation against an arbitrary number of components may be expect and take significantly more time than many other REST API actions. As a result, this endpoint will immediately return a ParameterContextValidationRequestEntity, and the process of validating the necessary components will occur asynchronously in the background. The client may then periodically poll the status of the request by issuing a GET request to /parameter-contexts/validation-requests/{requestId}. Once the request is completed, the client is expected to issue a DELETE request to /parameter-contexts/validation-requests/{requestId}.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void submitValidationRequestTest() throws ApiException {
        String contextId = null;
        ParameterContextValidationRequestEntity body = null;
        ParameterContextValidationRequestEntity response = api.submitValidationRequest(contextId, body);

        // TODO: test validations
    }
    
    /**
     * Modifies a Parameter Context
     *
     * This endpoint will update a Parameter Context to match the provided entity. However, this request will fail if any component is running and is referencing a Parameter in the Parameter Context. Generally, this endpoint is not called directly. Instead, an update request should be submitted by making a POST to the /parameter-contexts/update-requests endpoint. That endpoint will, in turn, call this endpoint.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateParameterContextTest() throws ApiException {
        String id = null;
        ParameterContextEntity body = null;
        ParameterContextEntity response = api.updateParameterContext(id, body);

        // TODO: test validations
    }
    
}
